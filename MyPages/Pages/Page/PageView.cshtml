@page "{id:int?}"
@model MyPages.Pages.Page.PageViewModel
@{
    ViewData["Title"] = "PageView";
}


@section Styles {
    <link rel="stylesheet" href="~/css/pageView.css?v=1.2" />
}

@if (Model.PageEntity == null)
{
    <h1>Unauthorized entry</h1>
    <hr />
}
else
{
    <div class="nav row ml-1 mr-1">
        <partial name="_Path" model="@Model.PageEntity" />

        @if (Model.UserType.Equals(PageViewModel.UserTypeEnum.Owner))
        {
            <div class="ml-auto">
                <a class="btn" asp-page="/Page/Update" asp-route-id="@Model.PageEntity.Id" title="Edit"><span class="fa fa-edit"></span></a>
            </div>
            <div class="">
                <a class="btn" asp-page="/Page/Create" asp-route-id="@Model.PageEntity.Id" title="Add page"><span class="fa fa-plus"></span></a>
            </div>
        }
    </div>
    @if (Model.Pages.Count > 0)
    {
        <hr />
        <div class="row sortable">
            @foreach (var item in Model.Pages)
            {
                <div class="col-lg-3 col-md-4 col-6 pl-md-2 pr-md-2 pl-1 pr-1 mt-2 mb-2 item" id="@item.Id">
                    <button class="btn text-white btn-delete" data-toggle="modal" data-target="#deleteConfirm" data-item-name="@item.Name" data-item-id="@item.Id">&times;</button>
                    <a class="btn btn-pages-list" asp-page="/Page/PageView" asp-route-id="@item.Id" style="background-color:@item.Color"> @item.Name</a>
                </div>
            }

            <div class="dropdown-menu context-menu" id="context-menu">
                <a class="dropdown-item" href="#" id="context-menu-open">Open</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="#" id="context-menu-edit">Edit</a>
                <h6 class="dropdown-header">Change color</h6>
                <div class="dropdown-item-text btn-group-toggle mb-2" data-toggle="buttons" id="context-menu-colors">
                    @{
                        foreach (var color in Model.Colors)
                        {
                            <label class="btn color-button" style="background-color: @color">
                                <input type="radio" value="@color" name="item-color">
                            </label>
                        }
                    }
                </div>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="#" id="context-menu-delete">Delete</a>
            </div>
        </div>
    }
    @if (Model.PageEntity.Content != null)
    {
        <hr />
        <partial name="_Content" model="@Model.PageEntity" />
        <hr />
    }
    <div id="deleteConfirm" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Are you sure?</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Do you really want to delete this element? This process cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-info" data-dismiss="modal">Cancel</button>
                    <button class="btn btn-danger" id="deleteConfirmButton">Delete</button>
                </div>
            </div>
        </div>
    </div>


    @section Scripts {
        <script type="text/javascript">

            $(() => {
                var itemId;
                $('#deleteConfirm').on('show.bs.modal', (e) => {
                    var button = $(e.relatedTarget);
                    itemId = button.data('item-id');
                });

                $('#deleteConfirmButton').on('click', () => {
                    var url = '/api/Page/' + itemId;
                    $.ajax({
                        type: 'delete',
                        url: url,
                        contentType: 'application/json',
                        headers: {
                            RequestVerificationToken:
                                $('input:hidden[name="__RequestVerificationToken"]').val()
                        }
                    }).done(function (e) {
                        window.location.reload();
                    });
                });

                $('.sortable').sortable({
                    items: ".item",
                    update: () => {
                        var order = [];
                        $('.sortable .item').each(function (index) {
                            order.push(index + '=' + $(this).attr("id"));
                        });
                        var positions = order.join(';');

                        var url = '/api/Page/' + @Model.PageEntity.Id + '/relocate';
                        $.ajax({
                            type: 'post',
                            url: url,
                            data: JSON.stringify(positions),
                            contentType: 'application/json',
                            headers: {
                                RequestVerificationToken:
                                    $('input:hidden[name="__RequestVerificationToken"]').val()
                            },
                        });
                    }
                }).disableSelection();

                $('.item').on('contextmenu', function (e) {
                    var top = e.pageY;
                    var left = e.pageX;
                    $("#context-menu").css({
                        display: "block",
                        top: top,
                        left: left
                    }).addClass("show");
                    itemId = $(this).attr('id');
                    $("#context-menu-open").attr("href", "/Page/" + itemId);
                    $("#context-menu-edit").attr("href", "/Page/Update/" + itemId + "?redirect=" + window.location.href);
                    $("#context-menu-delete").on("click", function () {
                        $("#" + itemId).find(".btn-delete").trigger("click");
                    })

                    var color = RGBToHex($(this).find("a.btn-pages-list").css("background-color")).toUpperCase();
                    setContextMenuColor(color);

                    var url = '/api/Page/' + itemId + '/color';
                    $.ajax({
                        type: 'get',
                        url: url,
                        contentType: 'application/json',
                        headers: {
                            RequestVerificationToken:
                                $('input:hidden[name="__RequestVerificationToken"]').val()
                        }
                    }).done(function (e) {
                        if (e != color)
                            setContextMenuColor(e);
                    });
                    return false;
                }).on("click", function () {
                    $("#context-menu").removeClass("show").hide();
                });

                $("label.color-button > input:radio[name='item-color']").parent().on("click", function() {
                    var url = '/api/Page/' + itemId + '/color';
                    var color = RGBToHex($(this).css("background-color")).toUpperCase();
                     $(".item[id='" + itemId + "'] > a.btn-pages-list").css("background-color", color);
                    $.ajax({
                        type: 'post',
                        url: url,
                        data: JSON.stringify(color),
                        contentType: 'application/json',
                        headers: {
                            RequestVerificationToken:
                                $('input:hidden[name="__RequestVerificationToken"]').val()
                        },
                    });

                })

                $("body").on("click", function () {
                    $("#context-menu").removeClass("show").hide();
                })


            });

            function RGBToHex(rgb) {
              let sep = rgb.indexOf(",") > -1 ? "," : " ";
              rgb = rgb.substr(4).split(")")[0].split(sep);

              let r = (+rgb[0]).toString(16),
                  g = (+rgb[1]).toString(16),
                  b = (+rgb[2]).toString(16);

              if (r.length == 1)
                r = "0" + r;
              if (g.length == 1)
                g = "0" + g;
              if (b.length == 1)
                b = "0" + b;

              return "#" + r + g + b;
            }

            function setContextMenuColor(color) {
                $("label.color-button > input:radio[name='item-color']").parent().removeClass('active');
                $("label.color-button > input:radio[value='" + color.toUpperCase() + "']").parent().addClass('active');
            }
        </script>
    }
}
